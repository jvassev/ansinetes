#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

die() {
  echo -e >&2 "error: $@"
  exit 1
}

log() {
  echo >&2 "$@"
}

# Mac doesn't have the shuf
which shuf > /dev/null || shuf() { awk 'BEGIN {srand(); OFMT="%.17f"} {print rand(), $0}' "$@" |
               sort -k1,1n | cut -d ' ' -f2-; }

usage() {
  cat >&2 << EOF
Usage: ansinetes ARGS
    -p, --project DIR        Interactive shell into project directory
    -s, --shell              Starts bash with kubectl and etcdctl configured
    -n, --namespace          If started with -s sets the default namespace
    -f, --file SCRIPT        Feeds SCRIPT to bash (with -s specified) or run
                                 it inside the container. Make sure  path is
                                 correct within container.
    -u, --update             Updates ansinetes. Location must be writable by
                                 current user.
    -h, --help               Shows this screen.
EOF
}

# mac doesn't have readlink -f
realpath() {
  DIR=$1
  (cd "$DIR" && echo "$(pwd -P)")
}

######## setup
START_SHELL=0
DEFAULT_NS="default"
RUN_FILE=""
UPDATE=0

readonly ETCD_VERSION=v2.3.7
readonly ANSINETES_IMAGE=${ANSINETES_IMAGE:-jvassev/ansinetes}


######## parse flags
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -h|--help)
      usage
      exit 0
    ;;
    -p|--project)
      ANSINETES_PROJECT="$2"
      shift
    ;;
    -s|--shell)
      START_SHELL=1
    ;;
    -f|--file)
      RUN_FILE="$2"
      shift
    ;;
    -n|--namespace)
      DEFAULT_NS="$2"
      shift
    ;;
    -u|--update)
    UPDATE=1
    ;;
    *)
    die Unknown param $key
    ;;
   esac
  shift # past argument or value
done

if [[ $UPDATE == 1 ]]; then
  docker rmi $ANSINETES_IMAGE || true
  curl https://raw.githubusercontent.com/jvassev/ansinetes/master/ansinetes > ${BASH_SOURCE[0]}
  exit 0
fi

if [[ "${ANSINETES_PROJECT:-}" == "" ]]; then
  die Project must be defined with -p or using \$ANSINETES_PROJECT var
fi

mkdir -p ${ANSINETES_PROJECT} &> /dev/null
ANSINETES_PROJECT=$(realpath ${ANSINETES_PROJECT})
readonly SHORT_NAME=$(basename ${ANSINETES_PROJECT})


if [[ $START_SHELL == 0 ]]; then
  INTERACTIVE="-ti"

  if [[ "$RUN_FILE" != "" ]]; then
    INTERACTIVE=""
  fi

  docker run --rm $INTERACTIVE \
    -h $(basename ${ANSINETES_PROJECT}) \
    -e OUTER_USER=$(id -u) \
    -e RUN_FILE="$RUN_FILE" \
    -e ANSINETES_PROJECT="${ANSINETES_PROJECT}" \
    -v ${ANSINETES_PROJECT}/tmp:/tmp/ansible \
    -v ${ANSINETES_PROJECT}:/ansinetes \
    ${ANSINETES_IMAGE}
  exit 0
fi


######## download etcdctl
if [[ ! -f ${ANSINETES_PROJECT}/tmp/local-bin/etcdctl ]]; then
  log Installing etcdctl locally...

  mkdir -p ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null || true
  pushd ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null

  if [ "$(uname)" == "Darwin" ]; then
    curl -L -# https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-darwin-amd64.zip -o ${ANSINETES_PROJECT}/tmp/etcd.zip
    unzip ${ANSINETES_PROJECT}/tmp/etcd.zip &> /dev/null
    mv etcd-*/etcdctl .
    rm -fr etcd-* &> /dev/null
    chmod +x etcdctl
  else
    curl -L -# https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz -o ${ANSINETES_PROJECT}/tmp/etcd.tar.gz
    tar xzf ${ANSINETES_PROJECT}/tmp/etcd.tar.gz --strip-components=1 &> /dev/null
    rm -fr ${ANSINETES_PROJECT}/tmp/local-bin/Documentation ${ANSINETES_PROJECT}/tmp/local-bin/etcd &> /dev/null
  fi

  popd &> /dev/null
fi


######## download helm
if [ ! -f ${ANSINETES_PROJECT}/tmp/local-bin/helm ]; then
  log Installing helm locally...

  mkdir -p ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null || true
  pushd ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null

  HELM_VERSION=$(cat ${ANSINETES_PROJECT}/ansible/k8s-config/vars.yaml | sed -n '/helm_install/{n;p;n;p;n;p;}' | grep version | sed 's/.*version: *//')

  if [ "$(uname)" == "Darwin" ]; then
    curl -L -# https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-darwin-amd64.tar.gz -o ${ANSINETES_PROJECT}/tmp/helm.tar.gz
    tar xzf ${ANSINETES_PROJECT}/tmp/helm.tar.gz --strip-components=1 &> /dev/null
    chmod +x helm
  else
    curl -L -# https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz -o ${ANSINETES_PROJECT}/tmp/helm.tar.gz
    tar xzf ${ANSINETES_PROJECT}/tmp/helm.tar.gz --strip-components=1 &> /dev/null
  fi

  popd &> /dev/null
fi

####### download kubectl
if [ ! -f ${ANSINETES_PROJECT}/tmp/local-bin/kubectl ]; then
  log Installing kubectl locally...
  mkdir -p ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null || true
  pushd ${ANSINETES_PROJECT}/tmp/ &> /dev/null

  KUBECTL_VERSION=$(cat ${ANSINETES_PROJECT}/ansible/k8s-config/vars.yaml | sed -n '/kubernetes_install/{n;p;n;p;n;p;}' | grep version | sed 's/.*version: *//')
  if [ "$(uname)" == "Darwin" ]; then
    curl -L -# -O https://dl.k8s.io/${KUBECTL_VERSION}/kubernetes-client-darwin-amd64.tar.gz
  else
    curl -L -# -O https://dl.k8s.io/${KUBECTL_VERSION}/kubernetes-client-linux-amd64.tar.gz
  fi

  tar xzf kubernetes-client-*.tar.gz -C local-bin --strip-components 3
  popd &> /dev/null
fi

######## configure kubectl
PATH=${ANSINETES_PROJECT}/tmp/local-bin:$PATH

if [[ "default" != "$DEFAULT_NS" ]]; then
  readonly kube_cfg=$(mktemp)
  cp ${ANSINETES_PROJECT}/kubeconfig.yaml ${kube_cfg}
  export KUBECONFIG=${kube_cfg}
  kubectl config set-context ansinetes --namespace=foo > /dev/null
else
  export KUBECONFIG=${ANSINETES_PROJECT}/kubeconfig.yaml
fi

######## prepare bash env
mkdir ${ANSINETES_PROJECT}/tmp -p &> /dev/null || true
readonly bash_cfg=$(mktemp)
readonly ssh_cfg=$(mktemp)
readonly cyan="\[\033[0;36m\]"
readonly no_color="\[\033[0m\]"

cp ~/.ssh/config $ssh_cfg || true
cat ${ANSINETES_PROJECT}/tmp/ssh_config >> $ssh_cfg || true

cp ~/.bashrc ${bash_cfg} &> /dev/null || echo No .bashrc file found

cat << EOF >> ${bash_cfg}

######### ansinetes customizations
. ${ANSINETES_PROJECT}/tmp/etcd_config || true
export PATH=${ANSINETES_PROJECT}/tmp/local-bin:\$PATH
export PS1="\${PS1}[${cyan}*${SHORT_NAME}:${DEFAULT_NS}*${no_color}] "

kubectl config use-context ${ANSINETES_PROJECT} &> /dev/null
source <(kubectl completion bash)

source <(helm completion bash)

alias ssh="ssh -F ${ssh_cfg}"
export HISTFILE=${ANSINETES_PROJECT}/tmp/${DEFAULT_NS}-hist
echo Welcome to ansinetes virtual environment \"${ANSINETES_PROJECT}\"
EOF

chmod go-rwx ${ANSINETES_PROJECT}/security/ansible-ssh-key || true > /dev/null

bash --rcfile ${bash_cfg} $RUN_FILE
