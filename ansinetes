#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

die() {
  echo -e >&2 "error: $@"
  exit 1
}

log() {
  echo >&2 "$@"
}

# Mac doesn't have the shuf
which shuf > /dev/null || shuf() { awk 'BEGIN {srand(); OFMT="%.17f"} {print rand(), $0}' "$@" |
               sort -k1,1n | cut -d ' ' -f2-; }

usage() {
  cat >&2 << EOF
Usage: ansinetes ARGS
    -p, --project DIR        Interactive shell into project directory
    -s, --shell              Starts bash with kubectl and etcdctl configured
    -n, --namespace          If started with -s sets the default namespace
    -f, --file SCRIPT        Feeds SCRIPT to bash (with -s specified) or run
                                 it inside the container. Make sure  path is
                                 correct within container.
    -h, --help               Shows this screen.
EOF
}

realpath() {
  DIR=$1
  (cd "$DIR" && echo "$(pwd -P)")
}

######## setup
START_SHELL=0
DEFAULT_NS="default"
RUN_FILE=""

readonly ETCD_VERSION=v2.3.7
readonly KUBECTL_VERSION=v1.4.4

readonly ANSINETES_IMAGE=${ANSINETES_IMAGE:-jvassev/ansinetes}


######## parse flags
while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    -h|--help)
      usage
      exit 0
    ;;
    -p|--project)
      ANSINETES_PROJECT="$2"
      shift
    ;;
    -s|--shell)
      START_SHELL=1
    ;;
    -f|--file)
      RUN_FILE="$2"
      shift
    ;;
    -n|--namespace)
      DEFAULT_NS="$2"
      shift
    ;;
    *)
    die Unknown param $key
    ;;
   esac
  shift # past argument or value
done

if [ "${ANSINETES_PROJECT:-}" == "" ]; then
  die Project must be defined with -p or using \$ANSINETES_PROJECT var
fi

mkdir -p ${ANSINETES_PROJECT} &> /dev/null
ANSINETES_PROJECT=$(realpath ${ANSINETES_PROJECT})
readonly SHORT_NAME=$(basename ${ANSINETES_PROJECT})


if [ $START_SHELL == 0 ]; then
  INTERACTIVE="-ti"

  if [ "$RUN_FILE" != "" ]; then
    INTERACTIVE=""
  fi

  docker run --rm $INTERACTIVE \
    -h $(basename ${ANSINETES_PROJECT}) \
    -e OUTER_USER=$(id -u) \
    -e RUN_FILE="$RUN_FILE" \
    -v ${ANSINETES_PROJECT}/tmp:/tmp/ansible \
    -v ${ANSINETES_PROJECT}:/ansinetes \
    ${ANSINETES_IMAGE}
  exit 0
fi


######## download etcdctl
if [ ! -f ${ANSINETES_PROJECT}/tmp/local-bin/etcdctl ]; then
  log Installing etcdctl locally...

  mkdir -p ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null || true
  pushd ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null

  if [ "$(uname)" == "Darwin" ]; then
    curl -L -# https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-darwin-amd64.zip -o ${ANSINETES_PROJECT}/tmp/etcd.zip
    unzip ${ANSINETES_PROJECT}/tmp/etcd.zip &> /dev/null
    mv etcd-*/etcdctl .
    rm -fr etcd-* &> /dev/null
    chmod +x etcdctl
  else
    curl -L -# https://github.com/coreos/etcd/releases/download/${ETCD_VERSION}/etcd-${ETCD_VERSION}-linux-amd64.tar.gz -o ${ANSINETES_PROJECT}/tmp/etcd.tar.gz
    tar xzf ${ANSINETES_PROJECT}/tmp/etcd.tar.gz --strip-components=1 &> /dev/null
    rm -fr ${ANSINETES_PROJECT}/tmp/local-bin/Documentation ${ANSINETES_PROJECT}/tmp/local-bin/etcd &> /dev/null
  fi

  popd &> /dev/null
fi


####### download kubectl only for mac
if [ ! -f ${ANSINETES_PROJECT}/tmp/local-bin/kubectl ]; then
  log Installing kubectl locally...
  mkdir -p ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null || true
  pushd ${ANSINETES_PROJECT}/tmp/local-bin &> /dev/null

  if [ "$(uname)" == "Darwin" ]; then
    curl -L -#  -O https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/darwin/amd64/kubectl
    chmod +x kubectl
  else
    curl -L -#  -O https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
    chmod +x kubectl
  fi

  popd &> /dev/null
fi

######## configure kubectl
# get a random node from cluster: every node runs haproxy that routes to an apiserver
RANDOM_MASTER_IP=$(cat ${ANSINETES_PROJECT}/ansible/hosts | sed -n 's/.*ansible_host=\(.*\)/\1/p' | shuf | head -n 1)

if [ "${KUBECONFIG:-}" == "" ]; then
  # don't touch user's config unless told so
  export KUBECONFIG=$(mktemp)
fi

PATH=${ANSINETES_PROJECT}/tmp/local-bin:$PATH
kubectl config set-cluster ${ANSINETES_PROJECT} \
  --server=https://${RANDOM_MASTER_IP}:6443 \
  --embed-certs=true \
  --certificate-authority=${ANSINETES_PROJECT}/security/ca.pem \
  > /dev/null

kubectl config set-cluster ${ANSINETES_PROJECT} \
  --insecure-skip-tls-verify=true \
  > /dev/null

kubectl config set-credentials admin@${ANSINETES_PROJECT} \
  --client-key=${ANSINETES_PROJECT}/security/certs/admin-key.pem \
  --client-certificate=${ANSINETES_PROJECT}/security/certs/admin.pem \
  --embed-certs=true \
  > /dev/null

kubectl config set-context ${ANSINETES_PROJECT} \
  --cluster=${ANSINETES_PROJECT} \
  --namespace=$DEFAULT_NS \
  --user=admin@${ANSINETES_PROJECT} > /dev/null

kubectl config use-context ${ANSINETES_PROJECT} > /dev/null


######## prepare bash env
mkdir ${ANSINETES_PROJECT}/tmp -p &> /dev/null || true
readonly bash_cfg=$(mktemp)
readonly ssh_cfg=$(mktemp)
readonly cyan="\[\033[0;36m\]"
readonly no_color="\[\033[0m\]"

cp ~/.ssh/config $ssh_cfg || true
echo "# ansinetes customizations" >> $ssh_cfg
IFS='
'
for line in $(cat ${ANSINETES_PROJECT}/ansible/hosts | grep ansible_host | sed 's/ansible_host=//'); do
  IFS=' ' read -r -a array <<< $line
  cat <<EOF

Host ${array[0]}
  HostName ${array[1]}
  IdentityFile ${ANSINETES_PROJECT}/security/ansible-ssh-key
  User core
  ForwardAgent yes
    IdentitiesOnly yes
  StrictHostKeyChecking no
EOF
done >> $ssh_cfg

cp ~/.bashrc ${bash_cfg} &> /dev/null || echo No .bashrc file found

cat << EOF >> ${bash_cfg}

######### ansinetes customizations
export ETCDCTL_ENDPOINTS=https://${RANDOM_MASTER_IP}:2379
export ETCDCTL_CA_FILE=${ANSINETES_PROJECT}/security/ca.pem
export ETCDCTL_CERT_FILE=${ANSINETES_PROJECT}/security/certs/etcd-client.pem
export ETCDCTL_KEY_FILE=${ANSINETES_PROJECT}/security/certs/etcd-client-key.pem

export PATH=${ANSINETES_PROJECT}/tmp/local-bin:\$PATH
export PS1="\${PS1}[${cyan}*${SHORT_NAME}*${no_color}] "

kubectl config use-context ${ANSINETES_PROJECT} &> /dev/null
source <(kubectl completion bash)

alias ssh="ssh -F ${ssh_cfg}"
export HISTFILE=${ANSINETES_PROJECT}/tmp/${DEFAULT_NS}-hist
echo Welcome to ansinetes virtual environment \"${ANSINETES_PROJECT}\"
EOF

bash --rcfile ${bash_cfg} $RUN_FILE
