---
- name: Install kubernetes on all nodes

  hosts: all

  vars_files:
    - /etc/ansible/k8s-config/vars.yaml

  vars:
    addons:
      - dashboard-controller.yaml
      - dashboard-service.yaml
      - kubedns-sa.yaml
      - kubedns-controller.yaml
      - kubedns-svc.yaml
      - heapster-controller.yaml
      - heapster-service.yaml
      - ovpn-secrets.yaml
      - ovpn-controller.yaml
      - ovpn-service.yaml
      - default-backend.yaml
      - default-backend-service.yaml
      - registry-rc.yaml
      - registry-svc.yaml
      - registry-ds.yaml
      - nginx-ingress.yaml
      - datadog.yaml
      - sysdig-daemonset.yaml

  handlers:
    - name: restart-apiserver
      service: name=kube-apiserver state=restarted enabled=yes
      when: inventory_hostname in groups['apiservers'] and not apiserver_needs_restart.changed

    - name: restart-apiserver-lb
      service: name=apiserver-lb state=restarted enabled=yes
      when: not apiserver_lb_needs_restart.changed

    - name: restart-scheduler
      service: name=kube-scheduler state=restarted enabled=yes
      when: inventory_hostname in groups['schedulers'] and not scheduler_needs_restart.changed

    - name: restart-proxy
      service: name=kube-proxy state=restarted enabled=yes
      when: inventory_hostname in groups['kubelets'] and not proxy_needs_restart.changed

    - name: restart-kubelet
      service: name=kubelet state=restarted enabled=yes
      when: inventory_hostname in groups['kubelets'] and not kubelet_needs_restart.changed

    - name: restart-controller-manager
      service: name=kube-controller-manager state=restarted enabled=yes
      when: inventory_hostname in groups['controller-managers'] and not controller_needs_restart.changed

  tasks:
    - name: Download kubernetes binaries locally
      get_url:
      args:
        url: https://dl.k8s.io/{{kubernetes_install.version}}/kubernetes-server-linux-amd64.tar.gz
        dest: /tmp/ansible/kubernetes-{{kubernetes_install.version}}.tar.gz
        checksum: "{{kubernetes_install.sha256}}"
      when: inventory_hostname == play_hosts[0]
      delegate_to: localhost
      become: False

    - name: Extract binaries locally
      command: /etc/ansible/books/extract-k8s.sh /tmp/ansible/kubernetes-{{kubernetes_install.version}}.tar.gz {{kubernetes_install.sha256[7:]}}
      args:
        chdir: /tmp/ansible
      when: inventory_hostname == play_hosts[0]
      delegate_to: localhost
      become: False

    - name: Create kubernetes dirs
      file:
      args:
        path: "{{item}}"
        state: directory
        owner: root
        mode: 0755
      with_items:
        - /etc/haproxy
        - /etc/kubernetes/addons
        - /etc/kubernetes/conf
        - /etc/kubernetes/manifests
        - /etc/kubernetes/ssl
        - /opt/kubernetes/bin

    - name: Upload kubernetes binaries
      copy:
      args:
        src: /tmp/ansible/{{kubernetes_install.sha256[7:]}}/{{item}}
        dest: /opt/kubernetes/bin
        owner: root
        mode: 0755
      with_items:
        - hyperkube
        - kubectl
      notify:
        - restart-scheduler
        - restart-proxy
        - restart-kubelet
        - restart-controller-manager
        - restart-apiserver

    - name: Upload jsonl policy
      copy:
      args:
        src: /etc/ansible/k8s-config/policy.jsonl
        dest: /etc/kubernetes/conf/policy.jsonl
      notify:
        - restart-apiserver

    - name: Upload systemd unit files
      copy:
      args:
        src: /etc/ansible/k8s-config/systemd/{{item}}
        dest: /etc/systemd/system/{{item}}
        owner: root
      with_items:
        - kube-scheduler.service
        - kube-proxy.service
        - kubelet.service
        - kube-controller-manager.service
        - kube-apiserver.service
      notify:
        - restart-scheduler
        - restart-proxy
        - restart-kubelet
        - restart-controller-manager
        - restart-apiserver

    - name: Create apiserver certificate
      command: "kt-server-cert-create -h {{kubernetes_apiserver_ip}},localhost,127.0.0.1,{%for name in groups.apiservers%}{{hostvars[name][public_iface].ipv4.address}}{%if not loop.last%},{%endif%}{%endfor%} apiserver"
      delegate_to: localhost
      when: inventory_hostname == play_hosts[0]
      args:
        creates: /ansinetes/security/certs/apiserver.pem
      become: False

    - name: Upload ca file
      copy:
      args:
        src: /ansinetes/security/ca.pem
        dest: /etc/kubernetes/ssl/ca.pem

    - name: Upload apiserver certificates
      copy:
      args:
        src: /ansinetes/security/certs/{{item}}
        dest: /etc/kubernetes/ssl/{{item}}
        owner: root
      with_items:
        - apiserver.pem
        - apiserver-key.pem
      notify:
        - restart-apiserver

    - name: Create client certificates
      command: "kt-client-cert-create {{item}}"
      delegate_to: localhost
      args:
        creates: /ansinetes/security/certs/{{item}}.pem
      become: False
      when: inventory_hostname == play_hosts[0]
      with_items:
        - proxy
        - admin
        - scheduler
        - controller-manager
        - kubelet

    - name: Upload kube-proxy client certificates
      copy:
      args:
        src: /ansinetes/security/certs/{{item}}
        dest: /etc/kubernetes/ssl/{{item}}
      with_items:
        - proxy.pem
        - proxy-key.pem
      notify:
        - restart-proxy

    - name: Upload kubelet client certificates
      copy:
      args:
        src: /ansinetes/security/certs/{{item}}
        dest: /etc/kubernetes/ssl/{{item}}
      with_items:
        - kubelet.pem
        - kubelet-key.pem
      notify:
        - restart-kubelet


    - name: Upload scheduler client certificates
      copy:
      args:
        src: /ansinetes/security/certs/{{item}}
        dest: /etc/kubernetes/ssl/{{item}}
      with_items:
        - scheduler.pem
        - scheduler-key.pem
      notify:
        - restart-scheduler

    - name: Upload controller-manager client certificates
      copy:
      args:
        src: /ansinetes/security/certs/{{item}}
        dest: /etc/kubernetes/ssl/{{item}}
      with_items:
        - controller-manager.pem
        - controller-manager-key.pem
      notify:
        - restart-controller-manager

    - name: Create service account keys
      command: "kt-client-cert-create sa"
      args:
        creates: /ansinetes/security/certs/sa.pem
      delegate_to: localhost
      become: False
      when: inventory_hostname == play_hosts[0]

    - name: Upload service account keys
      copy:
      args:
        src: /ansinetes/security/certs/{{item}}
        dest: /etc/kubernetes/ssl/{{item}}
      with_items:
        - sa.pem
        - sa-key.pem
      notify:
        - restart-controller-manager
        - restart-apiserver

    - name: Upload token.csv
      copy:
      args:
        src: /etc/ansible/k8s-config/token.csv
        dest: /etc/kubernetes/conf/token.csv
      notify:
        - restart-apiserver

    - name: Render kubecfg's
      template:
      args:
        src: /etc/ansible/k8s-config/kubeconfig/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.config
      with_items:
        - kubelet
        - proxy
        - scheduler
        - controller-manager
      notify:
        - restart-kubelet
        - restart-proxy
        - restart-scheduler
        - restart-controller-manager

    - name: Render config.env files
      template:
      args:
        src: /etc/ansible/k8s-config/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.env
      with_items:
        - config
      notify:
        - restart-scheduler
        - restart-proxy
        - restart-kubelet
        - restart-controller-manager
        - restart-apiserver

    - name: Render apiserver.env file
      template:
      args:
        src: /etc/ansible/k8s-config/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.env
      with_items:
        - apiserver
      notify:
        - restart-apiserver

    - name: Render controller-manager.env file
      template:
      args:
        src: /etc/ansible/k8s-config/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.env
      with_items:
        - controller-manager
      notify:
        - restart-controller-manager

    - name: Render kubelet.env file
      template:
      args:
        src: /etc/ansible/k8s-config/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.env
      with_items:
        - kubelet
      notify:
        - restart-kubelet

    - name: Render proxy.env file
      template:
      args:
        src: /etc/ansible/k8s-config/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.env
      with_items:
        - proxy
      notify:
        - restart-proxy

    - name: Render scheduler.env file
      template:
      args:
        src: /etc/ansible/k8s-config/{{item}}.j2
        dest: /etc/kubernetes/conf/{{item}}.env
      with_items:
        - scheduler
      notify:
        - restart-scheduler

    - name: Create ovpn certificates
      delegate_to: localhost
      become: False
      when: inventory_hostname == play_hosts[0]
      command: "kt-server-cert-create -h 127.0.0.1 ovpn-server"
      args:
        creates: /ansinetes/security/certs/ovpn-server.pem

    - name: Create ovpn client certificates
      delegate_to: localhost
      become: False
      when: inventory_hostname == play_hosts[0]
      command: "kt-client-cert-create ovpn-client"
      args:
        creates: /ansinetes/security/certs/ovpn-client.pem

    - name: Create ovpn dh params
      delegate_to: localhost
      become: False
      when: inventory_hostname == play_hosts[0]
      command: "openssl dhparam -out /ansinetes/security/certs/ovpn-dh.pem 1024"
      args:
        creates: /ansinetes/security/certs/ovpn-dh.pem

    - name: Create ovpn p12 cert bundle
      delegate_to: localhost
      become: False
      when: inventory_hostname == play_hosts[0]
      command: "openssl pkcs12 -export -out ovpn.p12 -inkey ovpn-server-key.pem -in ovpn-server.pem -certfile ../ca.pem -password pass:"
      args:
        chdir: /ansinetes/security/certs
        creates: /ansinetes/security/certs/ovpn.p12

    - name: Create ovpn client profile
      delegate_to: localhost
      become: False
      when: inventory_hostname == play_hosts[0]
      template:
      args:
        src: /etc/ansible/k8s-config/addons/ovpn-client.conf.j2
        dest: /ansinetes/ovpn-client.conf

    - name: Configure ha-proxy
      template:
      args:
        src: /etc/ansible/ha-config/apiserver.cfg.j2
        dest: /etc/haproxy/apiserver.cfg
      notify:
        - restart-apiserver-lb

    - name: Upload haproxy systemd unit
      copy:
      args:
        src: /etc/ansible/ha-config/apiserver-lb.service
        dest: /etc/systemd/system/apiserver-lb.service
      notify:
        - restart-apiserver-lb


    - name: Systemd daemon reload
      command: systemctl daemon-reload

    - name: Start apiserver
      service:
      args:
        name: kube-apiserver.service
        state: "{%if inventory_hostname in groups['apiservers']%}started{%else%}stopped{%endif%}"
        enabled: "{%if inventory_hostname in groups['apiservers']%}yes{%else%}no{%endif%}"
      register: apiserver_needs_restart

    - name: Start scheduler
      service:
      args:
        name: kube-scheduler.service
        state: "{%if inventory_hostname in groups['schedulers']%}started{%else%}stopped{%endif%}"
        enabled: "{%if inventory_hostname in groups['schedulers']%}yes{%else%}no{%endif%}"
      register: scheduler_needs_restart

    - name: Start controller-manager
      service:
      args:
        name: kube-controller-manager.service
        state: "{%if inventory_hostname in groups['controller-managers']%}started{%else%}stopped{%endif%}"
        enabled: "{%if inventory_hostname in groups['controller-managers']%}yes{%else%}no{%endif%}"
      register: controller_needs_restart

    - name: Start kubelet
      service:
      args:
        name: kubelet.service
        state: "{%if inventory_hostname in groups['kubelets']%}started{%else%}stopped{%endif%}"
        enabled: "{%if inventory_hostname in groups['kubelets']%}yes{%else%}no{%endif%}"
      register: kubelet_needs_restart

    - name: Start proxy
      service:
      args:
        name: kube-proxy.service
        state: "{%if inventory_hostname in groups['kubelets']%}started{%else%}stopped{%endif%}"
        enabled: "{%if inventory_hostname in groups['kubelets']%}yes{%else%}no{%endif%}"
      register: proxy_needs_restart

    - name: Start apiserver-lb
      service: name=apiserver-lb.service state=started enabled=yes
      register: apiserver_lb_needs_restart

    - name: Render cluster add-ons on the nodes
      template:
      args:
        src: /etc/ansible/k8s-config/addons/{{item}}.j2
        dest: /etc/kubernetes/addons/{{item}}
      register: addons_rendered
      with_items: "{{addons}}"

    - name: Render cluster add-ons locally
      delegate_to: localhost
      when: inventory_hostname == groups.apiservers[0]
      become: False
      template:
      args:
        src: /etc/ansible/k8s-config/addons/{{item}}.j2
        dest: /tmp/ansible/{{item}}
      with_items: "{{addons}}"

    - name: Stop add-ons
      command: "/opt/kubernetes/bin/kubectl {{kubectl_params}} delete -f /etc/kubernetes/addons/{{item.item}}"
      when: inventory_hostname == groups.apiservers[0] and item.changed
      ignore_errors: yes
      with_items: "{{addons_rendered.results}}"

    - name: Start add-ons
      command: "/opt/kubernetes/bin/kubectl {{kubectl_params}} create -f /etc/kubernetes/addons/{{item.item}}"
      when: inventory_hostname == groups.apiservers[0] and item.changed
      ignore_errors: yes
      with_items: "{{addons_rendered.results}}"

    - name: Start/Stop datadog
      command: "/opt/kubernetes/bin/kubectl {{kubectl_params}} {%if datadog.enabled%}create{%else%}delete{%endif%} -f /etc/kubernetes/addons/datadog.yaml"
      when: inventory_hostname == groups.apiservers[0]
      ignore_errors: yes

    - name: Start/Stop sysdig
      command: "/opt/kubernetes/bin/kubectl {{kubectl_params}} {%if sysdig.enabled%}create{%else%}delete{%endif%} -f /etc/kubernetes/addons/sysdig-daemonset.yaml"
      when: inventory_hostname == groups.apiservers[0]
      ignore_errors: yes
